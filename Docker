容器技术
  容器技术已成为应用程序封装和交付的核心技术
  容器技术不是虚拟化,是对资源的切分及隔离,使用
  技术的核心组成：
    Cgroups (control groups) -资源管理
    NameSpace 进程隔离
    SELinx 安全
    
Docker
  Docker时一套完整的容器管理系统
  Docker提供了一组命令,让用户更方便的使用容器技术,而不用关心内核
  
安装docker
  制作自定义yum源
  安装docker
  
镜像的基本操作
  docker镜像
    docker中容器基于镜像启动
    镜像是启动容器的核心
    镜像采用分层设计
    使用快照COW技术,确保底层数据不丢失
    docker 子命令 子命令参数
    docker help 子命令                   //docker help push 查看上传命令
    man docker-子命令
    [root@docker01 ~]# docker images   // 列出可使用的镜像
    REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
    busybox             latest              d8233ab899d4        3 days ago          1.199 MB
     Repository+tag 镜像+标签 唯一性
    
   查看docker镜像库 
    docker hub 镜像仓库
    http://hub.docker.com   //官方提供的镜像仓库  
    [root@docker01 ~]# docker search nginx //主机连接互联网 可以直接用该命令查找
    名称                        描述                                            下载次数   是否是官方    自动化
    NAME                       DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
    nginx                      Official build of Nginx.                        10918     [OK]       
    jwilder/nginx-proxy        Automated Nginx reverse proxy for docker c...   1533                 [OK]
  
  下载镜像
    [root@docker01 ~]# docker pull 镜像的名称
    
  镜像的保存与导入
   docker save | load
   备份保存,生成的是tar文件包
   [root@docker01 ~]# docker save busybox:latest > busybox.tar
   [root@docker01 ~]# ls
    busybox.tar                 //生成在当前路径下
   [root@docker01 ~]# scp busybox.tar 192.168.1.12:/root/
    root@192.168.1.12's password: 
    busybox.tar        100% 1392KB  29.1MB/s   00:00
    导入已生成的tar文件包
   [root@docker02 ~]# docker load < busybox.tar
    adab5d09ba79: Loading layer [==================================================>] 1.416 MB/1.416 MB
    Loaded image: busybox:latest
   
 启动容器命令
   docker run -it 镜像的名称:标签 命令     //命令为镜像内的命令
    没有命令输入的时候 就会启动默认命令   //有默认启动命令为进程服务
    latest 是默认标签
 
 查看正在运行中的容器
  [root@docker01 ~]# docker ps
  CONTAINER ID   IMAGE        COMMAND     CREATED       STATUS       PORTS           NAMES
  080bf2b7f6fa   nginx:latest "/bin/bash" 8 seconds ago Up 5 seconds 80/tcp, 443/tcp berserk_swirles
    
  [root@docker01 ~]# docker ps -a    //--all 显示所有
    
 其他镜像命令列表
  docker history                  //记录容器每一次映射的记录内容 显示镜像层及制作过程
  docker inspect                  //查看容器底层详细信息
  docker rmi                      //remove image 删除本地镜像
  docker tag                      //修改镜像名称及标签 类似于软连接
  
容器的常用命令
  docker run                  //运行容器
         -i 交互
         -t 终端
         -d 后台进程         
  [root@docker01 ~]# docker run -itd nginx
  14f595a865e49936ae2056b1c03a422ff2d0df3cd39b090db777bf1f9d778f6b
  docker ps                   //查看容器列表
  [root@docker01 ~]# docker ps
CONTAINER ID   IMAGE         COMMAND                  CREATED             STATUS              PORTS               NAMES
14f595a865e4   nginx         "nginx -g 'daemon off"   5 seconds ago       Up 3 seconds        80/tcp, 443/tcp     elegant_perlman
080bf2b7f6fa   nginx:latest  "/bin/bash"              About an hour ago   Up About an hour    80/tcp, 443/tcp     berserk_swirles
  
  docker stop                 //关闭容器
  docker start/restart                //启动已有的docker容器 docker ps -a 查看
  docker inspect
  docker top                        //查看容器的进程列表  相当于在容器里执行docker ps
  docker rm                          // 删除容器
  docker attach|exec                //进入容器
  [root@docker01 ~]# docker exec -it 14f595a865e4 /bin/bash   //未使用容器的上帝进程开启bash
  root@14f595a865e4:/#
  docker attach 14f595a865e4     //不关闭上帝进程 ctrl+p+Q

自定义镜像
  a)docker run -it centos  修改内容增改
  b)ctrl+p+q 
  c)docker commit 60637e52f298 myos:label    //commit ID
  d)docker images    
  e)docker history ID

Dockerfile文件
 语法格式
  FROM:基础镜像
  MAINTAINER:镜像创建者信息
  EXPOSE:开放端口
  ENV:设置变量
  ADD:复制文件到镜像
  RUN:制作镜像的执行命令
  WORKDIR:定义容器的工作目录
  CMD:容器启动时执行命令, 仅有一条CMD
  
[root@docker1 ~]# mkdir oo
[root@docker1 ~]# cd oo
[root@docker1 oo]# touch Dockerfile    //Dockerfile文件第一个字母要大写
[root@docker1 oo]# cp /etc/yum.repos.d/local.repo  ./
[root@docker1 oo]# vi Dockerfile
FROM  myos:v1
RUN yum -y install httpd
ADD local.repo /etc/yum.repos.d/local.repo
ENV EnvironmentFile=/etc/sysconfig/httpd
WORKDIR /var/www/html/            //定义容器默认工作目录
RUN echo "test" > /var/www/html/index.html
EXPOSE 80                //设置开放端口号
CMD ["/usr/sbin/httpd", "-DFOREGROUND"]
[root@docker1 oo]# docker build -t myos:http .
[root@docker1 oo]# docker run -d  myos:http 
d9a5402709b26b42cd304c77be442559a5329dc784ec4f6c90e4abac1c88e206
[root@docker1 oo]# docker inspect d9
[root@docker1 oo]# curl 172.17.0.7
  
